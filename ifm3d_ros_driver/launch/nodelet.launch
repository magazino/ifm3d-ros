<?xml version="1.0"?>

<launch>
  <!-- cmd line arguments -->
  <arg name="camera" default="camera"/>
  <arg name="ip" default="192.168.0.69" doc="The IP address of the VPU."/>
  <arg name="xmlrpc_port" default="80" doc="The TCP port the camera's xmlrpc server is listening on for requests."/>
  <arg name="pcic_port" default="50010" doc="The TCP (data) port the camera's pcic server is listening on for requests."/>
  <arg name="nodelet_manager" default="" doc="The name of the externally launched nodelet manager."/>
  <arg name="password" default="" doc="The password required to establish an edit session on the VPU"/>
  <arg name="imager_type" default="3D" doc="The imager type of the requested camera head"/>
  <arg name="timeout_millis" default="500" doc="The number of milliseconds to wait for the framegrabber to return new frame data before declaring a &quot;timeout&quot; and to stop blocking on new data."/>
  <arg name="timeout_tolerance_secs" default="5.0" doc="The wall time to wait with no new data from the camera before trying to establish a new connection to the camera. This helps to provide robustness against camera cables becoming unplugged or other in-field pathologies which would cause the connection between the ROS node and the camera to be broken."/>
  <arg name="respawn" default="false" doc="Restart the node automatically if it quits."/>
  <arg name="assume_sw_triggered" default="false" doc="This provides a hint to the driver that the camera is configured for software triggering (as opposed to free running). In this mode, certain default values are applied to lessen the noise in terms of timeouts from the frame grabber."/>
  <arg name="frame_id_base" default="ifm3d/$(arg camera)" />
  <arg name="xyz_image_stream" default="true" doc="Enable xyz image streaming for 3D camera camera streams." />
  <arg name="confidence_image_stream" default="true" doc="Enable confidence image streaming for 3D camera camera streams." />
  <arg name="radial_distance_image_stream" default="true" doc="Enable radial distance image streaming for 3D camera camera streams." />
  <arg name="radial_distance_noise_stream" default="true" doc="Enable distance noise image streaming for 3D camera camera streams." />
  <arg name="amplitude_image_stream" default="true" doc="Enable amplitude image streaming for 3D camera camera streams." />
  <arg name="extrinsic_image_stream" default="true" doc="Enable extrinsic values streaming for 3D camera camera streams." />
  <arg name="intrinsic_image_stream" default="false" doc="Enable intrinsic values streaming for 3D camera camera streams." />
  <arg name="rgb_image_stream" default="false" doc="Enable rgb image streaming for 3D camera camera streams." />
  <arg name="rgb_info_stream" default="false" doc="Enable rgb info streaming for 3D camera camera streams." />

  <arg name="external_manager" value="$(eval arg('nodelet_manager') != '')"/>
  <arg name="camera_nodelet_manager" if="$(arg external_manager)" value="$(arg nodelet_manager)"/>
  <arg name="camera_nodelet_manager" unless="$(arg external_manager)" value="$(arg camera)_standalone_nodelet"/>

  <node unless="$(arg external_manager)"
        pkg="nodelet"
        type="nodelet"
        name="$(arg camera_nodelet_manager)"
        args="manager"
        output="screen"/>

  <node pkg="nodelet"
        type="nodelet"
        name="$(arg camera)"
        args="load ifm3d_ros/camera_nodelet $(arg camera_nodelet_manager)"
        output="screen"
        respawn="$(arg respawn)">

    <!-- You can add topic remappings here, e.g.: -->

    <!-- <rosparam subst_value="true"> -->
      #
      # The IP address of the camera to connect to
      #
      <param name="ip" value="$(arg ip)"/>

      #
      # The on-camera TCP port that the XMLRPC server is listening to
      #
      <param name="xmlrpc_port" value="$(arg xmlrpc_port)"/>

      #
      # The on-camera TCP port that the PCIC server is listening to
      #
      <param name="pcic_port"  value="$(arg pcic_port)"/>

      #
      # The password needed to establish an edit session with the camera
     #
      <param name="password" value="$(arg password)"/>

      #
      # The imager type of the requested camera head
      #
      <param name="imager_type" value="$(arg imager_type)"/>

      #
      # The number of milliseconds to wait for a frame before declaring a
      # framegrabber timeout
      #
      <param name="timeout_millis" value="$(arg timeout_millis)"/>

      #
      # The number of seconds to endure timeouts before restarting the framegrabber
      #
      <param name="timeout_tolerance_secs" value="$(arg timeout_tolerance_secs)"/>

      #
      # Flag indicating whether or not the nodelet should assume the camera is
      # being software triggered
      #
      <param name="assume_sw_triggered" value="$(arg assume_sw_triggered)"/>

      #
      # If using the `SoftOff`/`SoftOn` functionality, these parameters
      # control the `timeout_millis` and `timeout_tolerance_secs`
      #
      <param name="soft_on_timeout_millis" value="$(arg timeout_millis)"/>
      <param name="soft_on_timeout_tolerance_secs" value="$(arg timeout_tolerance_secs)"/>
      <param name="soft_off_timeout_millis" value="500"/>
      <param name="soft_off_timeout_tolerance_secs" value="600.0"/>

      #
      # Time (seconds) used to determine that timestamps from the camera
      # cannot be trusted. When this threshold is exceeded, when compared to
      # system time, we use the reception time of the frame and not the capture
      # time of the frame.
      #
      <param name="frame_latency_thresh" value="60.0"/>


      #
      # Streaming of the XYZ point cloud image via the ros node
      #
      <param name="xyz_image_stream" value="$(arg xyz_image_stream)"/>

      #
      # Streaming of the confidence image via ros node
      #
      <param name="confidence_image_stream" value="$(arg confidence_image_stream)"/>
      <param name="radial_distance_noise_stream" value="$(arg radial_distance_noise_stream)"/>

      #
      # Streaming of the amplitude image via ros node
      #
      <param name="amplitude_image_stream" value="$(arg amplitude_image_stream)"/>

      #
      # Streaming of the extrinsics parameters via ros node
      #
      <param name="extrinsic_image_stream" value="$(arg extrinsic_image_stream)"/>

      #
      # Streaming of the intrinsics parameters via ros node
      #
      <param name="intrinsic_image_stream" value="$(arg intrinsic_image_stream)"/>

      #
      # Streaming of the 2D RGB image via ros node
      #
      <param name="rgb_image_stream" value="$(arg rgb_image_stream)"/>

      #
      # Streaming of the 2D RGB info via ros node
      #
      <param name="rgb_info_stream" value="$(arg rgb_info_stream)"/>
            <!--
      #
      # Get rid of the errors when running `rosbag -a'
      #
      distance/disable_pub_plugins: ['image_transport/compressedDepth', 'image_transport/theora']
      amplitude/disable_pub_plugins: ['image_transport/compressedDepth', 'image_transport/theora']
      confidence/disable_pub_plugins: ['image_transport/compressedDepth', 'image_transport/theora']
      xyz_image/disable_pub_plugins: ['image_transport/compressedDepth', 'image_transport/theora'] -->
    <!-- </rosparam> -->

    <param name="frame_id_base" value="$(arg frame_id_base)"/>

    <!-- if assume_sw_triggered == True -->
    <param name="timeout_millis" value="500" if="$(arg assume_sw_triggered)"/>
    <param name="timeout_tolerance_secs" value="600.0" if="$(arg assume_sw_triggered)"/>

    <!-- configure VPU (IPC) available data streams -->
    <param name="xyz_image_stream" value="$(arg xyz_image_stream)"/>
    <param name="confidence_image_stream" value="$(arg confidence_image_stream)"/>"
    <param name="radial_distance_image_stream" value="$(arg radial_distance_image_stream)"/>"
    <param name="radial_distance_noise_stream" value="$(arg radial_distance_noise_stream)"/>"
    <param name="amplitude_image_stream" value="$(arg amplitude_image_stream)"/>"
    <param name="extrinsic_image_stream" value="$(arg extrinsic_image_stream)"/>"
    <param name="intrinsic_image_stream" value="$(arg intrinsic_image_stream)"/>"
    <param name="rgb_image_stream" value="$(arg rgb_image_stream)"/>"
    <param name="rgb_info_stream" value="$(arg rgb_info_stream)"/>"

  </node>

  <!-- coord frame transform from optical frame to ROS sensor frame -->
  <node pkg="tf2_ros"
        type="static_transform_publisher"
        name="$(arg camera)_tf"
        args="0 0 0 0 0 0 $(arg frame_id_base)_link $(arg frame_id_base)_optical_link"
        respawn="$(arg respawn)" />

</launch>
 
